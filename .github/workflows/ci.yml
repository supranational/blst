name: build

on:
  push:
    branches:
    - '**'
  workflow_dispatch:
    branches:
    - '**'
  pull_request:
    branches:
    - master

jobs:
  rust-n-go:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest ]

    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: |
          ~/.cargo/registry
          **/Cargo.lock
          **/bindings/rust/target
        key: ${{ runner.os }}-cargo-7
        restore-keys: ${{ runner.os }}-cargo-6

    - name: Environment
      shell: bash
      run: |
        lscpu 2>/dev/null && echo --- || true
        env | sort

    - name: Rust
      shell: bash
      run: |
        rustc --version --verbose
        cd bindings/rust
        if [ "$GITHUB_EVENT_NAME" != "pull_request" ]; then
            cargo update
        fi
        cargo test --release
        cargo clean -p blst
        cargo clean -p blst --release
        rm -rf target/.rustc_info.json
        rm -rf target/{debug,release}/incremental
        rm -rf ~/.cargo/registry/src
        rm -rf ~/.cargo/registry/index/*/.cache

    - name: Go
      shell: bash
      run: |
        go version
        if ! (grep -q -e '^flags.*\badx\b' /proc/cpuinfo) 2>/dev/null; then
            export CGO_CFLAGS="-O -D__BLST_PORTABLE__"
        fi
        cd bindings/go
        go test -test.v

  misc-ubuntu-latest:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - uses: actions/cache@v2
      with:
        path: ~/swig
        key: ${{ runner.os }}-swig-pr1746

    - uses: actions/setup-java@v1
      with:
        java-version: 11

    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'

    - name: Environment
      run: |
        lscpu
        echo ---
        env | sort

    - name: Python
      run: if [ -x bindings/python/run.me ]; then bindings/python/run.me; fi

    - name: Java
      run: if [ -x bindings/java/run.me ]; then bindings/java/run.me; fi

  nodejs-build-swig:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true
      - uses: actions/cache@v2
        with:
          path: ~/swig
          key: ${{ runner.os }}-swig-pr1746
      - name: Setup SWIG
        run: |
          if [ ! -x ~/swig/bin/swig ]; then
            ( git clone -b pr/new-node-fixes https://github.com/yegorich/swig;
              cd swig;
              ./autogen.sh;
              ./configure --prefix=$HOME/swig;
              make;
              make install;
            )
          fi
      - name: Run.me
        run: |
          env PATH=~/swig/bin:$PATH SWIG_LIB=~/swig/share/swig/4.0.2 \
            ./bindings/node.js/run.me
      - name: Upload blst_wrap.cpp
        uses: actions/upload-artifact@v2
        with:
          name: blst_wrap.cpp
          path: bindings/node.js/blst_wrap.cpp
  nodejs:
    needs: ["nodejs-build-swig"]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        node: [10, 12]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: ~/swig
        key: ${{ runner.os }}-swig-pr1746
    - name: Setup Node.js ${{matrix.node}}
      uses: actions/setup-node@v1
      with:
        node-version: ${{matrix.node}}
    - name: Download blst_wrap.cpp
      uses: actions/download-artifact@v2
      with:
        name: blst_wrap.cpp
        path: bindings/node.js/
    - name: Setup node-gyp
      run: npm install --global node-gyp
    - name: Build with node-gyp
      shell: bash
      run: |
        cd bindings/node.js
        if [ "$RUNNER_OS" = "Linux" ]; then
            export PATH=~/swig/bin:$PATH SWIG_LIB=~/swig/share/swig/4.0.2
        elif [ -f blst_wrap.cpp ]; then # rename the downloaded artefact
            mv -f blst_wrap.cpp blst_wrap.v12.cpp
        fi
        node-gyp configure
        node-gyp build
        env NODE_PATH=build/Release node runnable.js
